// Code generated by "enumer -type=TokenKind"; DO NOT EDIT.

package ast

import (
	"fmt"
	"strings"
)

const _TokenKindName = "TokenKindCharTokenKindUnionTokenKindStarTokenKindLParenTokenKindRParenTokenKindEOF"

var _TokenKindIndex = [...]uint8{0, 13, 27, 40, 55, 70, 82}

const _TokenKindLowerName = "tokenkindchartokenkinduniontokenkindstartokenkindlparentokenkindrparentokenkindeof"

func (i TokenKind) String() string {
	if i < 0 || i >= TokenKind(len(_TokenKindIndex)-1) {
		return fmt.Sprintf("TokenKind(%d)", i)
	}
	return _TokenKindName[_TokenKindIndex[i]:_TokenKindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenKindNoOp() {
	var x [1]struct{}
	_ = x[TokenKindChar-(0)]
	_ = x[TokenKindUnion-(1)]
	_ = x[TokenKindStar-(2)]
	_ = x[TokenKindLParen-(3)]
	_ = x[TokenKindRParen-(4)]
	_ = x[TokenKindEOF-(5)]
}

var _TokenKindValues = []TokenKind{TokenKindChar, TokenKindUnion, TokenKindStar, TokenKindLParen, TokenKindRParen, TokenKindEOF}

var _TokenKindNameToValueMap = map[string]TokenKind{
	_TokenKindName[0:13]:       TokenKindChar,
	_TokenKindLowerName[0:13]:  TokenKindChar,
	_TokenKindName[13:27]:      TokenKindUnion,
	_TokenKindLowerName[13:27]: TokenKindUnion,
	_TokenKindName[27:40]:      TokenKindStar,
	_TokenKindLowerName[27:40]: TokenKindStar,
	_TokenKindName[40:55]:      TokenKindLParen,
	_TokenKindLowerName[40:55]: TokenKindLParen,
	_TokenKindName[55:70]:      TokenKindRParen,
	_TokenKindLowerName[55:70]: TokenKindRParen,
	_TokenKindName[70:82]:      TokenKindEOF,
	_TokenKindLowerName[70:82]: TokenKindEOF,
}

var _TokenKindNames = []string{
	_TokenKindName[0:13],
	_TokenKindName[13:27],
	_TokenKindName[27:40],
	_TokenKindName[40:55],
	_TokenKindName[55:70],
	_TokenKindName[70:82],
}

// TokenKindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenKindString(s string) (TokenKind, error) {
	if val, ok := _TokenKindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenKindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenKind values", s)
}

// TokenKindValues returns all values of the enum
func TokenKindValues() []TokenKind {
	return _TokenKindValues
}

// TokenKindStrings returns a slice of all String values of the enum
func TokenKindStrings() []string {
	strs := make([]string, len(_TokenKindNames))
	copy(strs, _TokenKindNames)
	return strs
}

// IsATokenKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenKind) IsATokenKind() bool {
	for _, v := range _TokenKindValues {
		if i == v {
			return true
		}
	}
	return false
}
